{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1046{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.14393}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang22\par
O Git \'e9 um sistema de controle de vers\'e3o. Com o Git voc\'ea n\'e3o perder\'e1 seu trabalho, vai poder voltar para a vers\'f5es anteriores, recuperando a vers\'e3o do seu c\'f3digo de antes de ter cometido o erro e poder\'e1 criar e trabalhar diversas vers\'f5es em paralelo.\par
\par
Uma \'f3tima leitura que indico \'e9 o livro Pro Git, escrito por Scott Chacon. Ele descreve corretamente sobre o controle de vers\'e3o. Olhe s\'f3:\par
\par

\pard\sl240\slmult1\cf1\b Iniciando o Git\par
\cf0\b0\par
Entre no diret\'f3rio que deseja controlar a vers\'e3o e inicie o Git assim:\par

\pard\sl276\slmult1\b git init\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Feito isso, seus arquivos ainda n\'e3o est\'e3o sendo versionados, mas eles est\'e3o esperando para serem adicionados no est\'e1gio de controle. Para fazer isso digite o comando\par

\pard\sl276\slmult1\b git add nome-do-arquivo-incluindo-extens\'e3o\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Se voc\'ea precisa adicionar todos os arquivos do diret\'f3rio, basta digitar:\par

\pard\sl276\slmult1\b git add .\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Saber o status do projeto \'e9 importante. Com o comando abaixo voc\'ea consegue ver quais arquivos est\'e3o fora do controle, quais foram modificados e est\'e3o esperando por uma descri\'e7\'e3o de modifica\'e7\'e3o etc:\par

\pard\sl276\slmult1\b git status\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Voltando ao est\'e1gio anterior do adicionamento:\par

\pard\sl276\slmult1\b git reset HEAD nome-do-arquivo\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Commit \f1\endash  Comitando:\par

\pard\sl276\slmult1\b git commit -m "Mensagem do commit"\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Adicionando e comitando ao mesmo tempo:\par

\pard\sl276\slmult1\b git commit -a -m "Mensagem do commit"\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl276\slmult1 Voltando commits a vers\f0\'f5es anteriores\par

\pard\sl240\slmult1 Voltar um commit:\par

\pard\sl276\slmult1\b git reset HEAD~1\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Voltar dois commits:\par

\pard\sl276\slmult1\b git reset HEAD~2\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Voltando um commit e deixando o arquivo no estagio anterior:\par

\pard\sl276\slmult1\b git reset HEAD~1 --soft\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Voltando um commit e excluindo o arquivo, deixando no est\'e1gio anterior:\par

\pard\sl276\slmult1\b git reset HEAD~1 --hard\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Verificando o hist\'f3rico de commits:\par

\pard\sl276\slmult1\b git log\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Verificando o que foi mudado, diferen\'e7a entre um arquivo e outro:\par

\pard\sl276\slmult1\b git log -p\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Verificando os 2 \'faltimos commits:\par

\pard\sl276\slmult1\b git log -p -2\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Mostrando as estat\'edsticas de todos os commits:\par
\b git log --stat\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Mostrando todos os commits, cada um em uma linha:\par

\pard\sl276\slmult1\b git log --pretty=oneline\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Mostrando todos os commits dos \'faltimos 2 dias at\'e9 o momento atual\par

\pard\sl276\slmult1\b git log --since=2.days\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Criando um branch \f1\endash  uma ramifica\f0\'e7\'e3o\par

\pard\sl276\slmult1\b git checkout -b nome-do-branch\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Verificando em que branch voc\'ea est\'e1\par

\pard\sl276\slmult1\b git branch\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Voltando para o branch master\par

\pard\sl276\slmult1\b git checkout master\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl276\slmult1 Jogando o branch criado no branch master\par

\pard\sl240\slmult1 Entre como branch master:\par

\pard\sl276\slmult1\b git merge nome-do-branch-que-foi-criado\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl276\slmult1 Grudando o branch criado no branch master sem o commit\par

\pard\sl240\slmult1 Somente localmente \f1\endash  localhost, entre como branch master:\par

\pard\sl276\slmult1\b git rebase nome-do-branch-que-foi-criado\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Removendo um branch:\par

\pard\sl276\slmult1\b git branch -D nome-do-branch\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Vendo branchs remotos:\par

\pard\sl276\slmult1\b git branch -a\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Mostrando o in\f0\'edcio do hash, quem comitou, quanto tempo atr\'e1s, mensagem: descri\'e7\'e3o do commit:\par

\pard\sl276\slmult1\b git log --pretty=format: "%h - %an, %ar : %s"\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Deletando arquivos:\par

\pard\sl276\slmult1\b git rm nome-do-arquivo\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Deletando todos os aquivos removidos ao mesmo tempo:\par

\pard\sl276\slmult1\b git ls-files --deleted | xargs git rm\par

\pard\sa200\sl276\slmult1\b0\par
\cf1\b Ignorando arquivos\cf0\b0\par
Existem alguns arquivos que muito provavelmente voc\'ea n\'e3o vai precisar versionar, como por exemplo os arquivos de cache do SASS, arquivos de configura\'e7\'e3o e etc. Nesse caso voc\'ea precisa fazer com que o controle de vers\'e3o ignore estes arquivos. Para tanto, crie um arquivo chamado .gitignore. Feito isso, dentro deste arquivo, digite o nome ou o endere\'e7o das pastas que voc\'ea quer ignorar. Um exemplo:\par
\par

\pard\sl276\slmult1 # See {{\field{\*\fldinst{HYPERLINK http://help.github.com/ignore-files/ }}{\fldrslt{http://help.github.com/ignore-files/\ul0\cf0}}}}\f0\fs22  for more about ignoring files.\par
# If you find yourself ignoring temporary files generated by your text editor\par

\pard\sl240\slmult1 # or operating system, you probably want to add a global ignore instead:\par

\pard\sl276\slmult1\b git config --global core.excludesfile ~/.gitignore_global\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 # Ignore bundler config\par

\pard\sl276\slmult1\b /.bundle\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 # Ignore the build directory\par

\pard\sl276\slmult1\b /build\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 # Ignore Sass' cache\par
\b /.sass-cache\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 # Ignore .DS_store file\par
.\b DS_Store\par
.cache\par
.rvmrc\b0\par

\pard\sl276\slmult1\b vendor/*\b0\par
\b .DS_Store\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1\b0 # Vim\b\par
*.swp\par
*.swo\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1\b Gemfile.lock\par
.vagrant\par
Vagrantfile\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 # rbenv\par

\pard\sl276\slmult1\b .ruby-version\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 # Ignore deploy related files\par

\pard\sl276\slmult1\b deploy\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1\b Gemfile.lock\b0\par

\pard\sl276\slmult1 O arquivo .gitignore fica na raiz do projeto.\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 Clonando e puxando altera\'e7\'f5es de projetos\par
Clonando um projeto remoto:\par
\b git clone url-do-projeto\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Fazendo um clone de outros branchs:\par

\pard\sl276\slmult1\b git checkout -b nome-do-branch origin/ nome-do-branch\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Trazendo, puxando as altera\'e7\'f5es feitas por outros usu\'e1rios:\par

\pard\sl276\slmult1\b git pull origin master\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Sincronizando tudo que est\'e1 no reposit\'f3rio remoto:\par

\pard\sl276\slmult1\b git pull\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Enviando o(s) projeto(s), arquivo(s) para o reposit\'f3rio:\par

\pard\sl276\slmult1\b git push origin master\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 Enviando um branch para o reposit\'f3rio:\par

\pard\sl276\slmult1\b git push origin nome-do-branch\b0\par

\pard\sa200\sl276\slmult1\par
\cf1\b Tags\cf0\b0\par
As tags servem para marcar uma etapa. Imagine que voc\'ea vai lan\'e7ar uma vers\'e3o, que resolve uma s\'e9rie de problemas. Voc\'ea pode marcar aquela etapa criando uma tag. Assim fica simples de fazer qualquer rollback do projeto para uma tag espec\'edfica em vez de voltar para um commit. Voc\'ea sabe que tudo o que foi feito at\'e9 aquela tag est\'e1 funcionando.\par
\par

\pard\sl240\slmult1 Criando tags:\par

\pard\sl276\slmult1\b git tag vers\'e3o-da-tag\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 Listando tags:\par

\pard\sl276\slmult1\b git tag -l\b0\par

\pard\sa200\sl276\slmult1\par

\pard\sl240\slmult1 Enviando a tag para o reposit\'f3rio\par

\pard\sl276\slmult1\b git push origin master --tags\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Removendo as tags criadas localmente:\par

\pard\sl276\slmult1\b git tag -d vers\'e3o-da-tag\par

\pard\sa200\sl276\slmult1\b0\par

\pard\sl240\slmult1 Removendo tag no reposit\'f3rio remoto:\par

\pard\sl276\slmult1\b git push origin :refs/tags/vers\'e3o-da-tag\par

\pard\sa200\sl276\slmult1\b0\par
\par
}
 